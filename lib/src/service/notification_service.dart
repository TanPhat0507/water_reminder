import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:water_reminder/src/pages/main/home_page.dart';

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  static Future<void> init() async {
    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const initSettings = InitializationSettings(android: androidInit);

    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'water_channel',
      'Water Reminders',
      description: 'Reminders to drink water',
      importance: Importance.max,
    );

    try {
      await _notificationsPlugin
          .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin
          >()
          ?.createNotificationChannel(channel);
    } catch (e) {
      print("Error creating notification channel: $e");
    }

    await _notificationsPlugin.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (response) {
        Fluttertoast.showToast(
          msg: "Notification clicked",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.BOTTOM,
          backgroundColor: Colors.blue,
          textColor: Colors.white,
          fontSize: 16,
        );
        navigatorKey.currentState?.pushAndRemoveUntil(
          MaterialPageRoute(builder: (_) => const HomePage()),
          (route) => false,
        );
      },
    );

    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('Asia/Ho_Chi_Minh'));
  }

  static Future<void> scheduleAuto({
    required String reminderId,
    required TimeOfDay time,
    required List<String> days, // c√≥ th·ªÉ r·ªóng
  }) async {
    final now = tz.TZDateTime.now(tz.local);
    print('Type of days: ${days.runtimeType}');

    print('Days: $days');

    if (days.isEmpty || days.every((day) => day.trim().isEmpty)) {
      tz.TZDateTime scheduled = tz.TZDateTime(
        tz.local,
        now.year,
        now.month,
        now.day,
        time.hour,
        time.minute,
      );

      if (scheduled.isBefore(now)) {
        scheduled = scheduled.add(const Duration(days: 1));
      }

      await _notificationsPlugin.zonedSchedule(
        reminderId.hashCode,
        "üíß ƒê·∫øn gi·ªù u·ªëng n∆∞·ªõc r·ªìi!",
        _getMessageByTime(time.hour),
        scheduled,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'water_channel',
            'Water Reminders',
            channelDescription: 'Reminders to drink water',
            importance: Importance.max,
            priority: Priority.high,
            icon: 'water',
            sound: RawResourceAndroidNotificationSound('water_sound'),
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );
    } else {
      for (final day in days) {
        final weekday = _weekdayStringToInt(day);
        final int id = _generateNotificationId(reminderId, weekday);
        final tz.TZDateTime scheduledTime = _nextInstanceOfWeekdayTime(
          time,
          weekday,
        );
        final String message = _getMessageByTime(time.hour);

        await _notificationsPlugin.zonedSchedule(
          id,
          "üíß ƒê·∫øn gi·ªù u·ªëng n∆∞·ªõc r·ªìi!",
          message,
          scheduledTime,
          const NotificationDetails(
            android: AndroidNotificationDetails(
              'water_channel',
              'Water Reminders',
              channelDescription: 'Weekly water reminder',
              importance: Importance.max,
              priority: Priority.high,
            ),
          ),
          matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        );
      }
    }
  }

  static Future<void> cancelReminder(String reminderId) async {
    // Loop through all weekdays (from Monday to Sunday) to cancel the notification
    for (int day = DateTime.monday; day <= DateTime.sunday; day++) {
      final int id = _generateNotificationId(reminderId, day);
      await _notificationsPlugin.cancel(id);
    }
  }

  static void showForegroundToast(String message) {
    Fluttertoast.showToast(
      msg: message,
      toastLength: Toast.LENGTH_LONG,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: Colors.blue,
      textColor: Colors.white,
      fontSize: 16,
    );
  }

  static int _generateNotificationId(String reminderId, int weekday) {
    if (reminderId == null || reminderId.isEmpty) {
      throw ArgumentError("Reminder ID cannot be null or empty");
    }
    return reminderId.hashCode + weekday;
  }

  static tz.TZDateTime _nextInstanceOfWeekdayTime(TimeOfDay time, int weekday) {
    final now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduled = tz.TZDateTime(
      tz.local,
      now.year,
      now.month,
      now.day,
      time.hour,
      time.minute,
    );

    while (scheduled.weekday != weekday || scheduled.isBefore(now)) {
      scheduled = scheduled.add(const Duration(days: 1));
    }

    return scheduled;
  }

  static int _weekdayStringToInt(String day) {
    switch (day.toLowerCase()) {
      case 'monday':
        return DateTime.monday;
      case 'tuesday':
        return DateTime.tuesday;
      case 'wednesday':
        return DateTime.wednesday;
      case 'thursday':
        return DateTime.thursday;
      case 'friday':
        return DateTime.friday;
      case 'saturday':
        return DateTime.saturday;
      case 'sunday':
        return DateTime.sunday;
      default:
        return DateTime.monday;
    }
  }

  static String _getMessageByTime(int hour) {
    const morning = [
      "Ng√†y m·ªõi t∆∞∆°i nh∆∞ gi·ªçt s∆∞∆°ng ‚Äì b·∫°n c≈©ng n√™n u·ªëng m·ªôt ng·ª•m n∆∞·ªõc ƒë·∫ßu ti√™n nh√©! üåû",
      "C·ªëc n∆∞·ªõc s√°ng s·ªõm l√† nƒÉng l∆∞·ª£ng m·ªü m√†n cho c·∫£ ng√†y! üöø",
      "D·∫≠y s·ªõm u·ªëng n∆∞·ªõc, b·∫°n gi·ªëng nh∆∞ c√¢y xanh ƒë∆∞·ª£c t∆∞·ªõi m√°t v·∫≠y ƒë√≥! üåø",
      "T·ª± th∆∞·ªüng b·∫£n th√¢n m·ªôt ly n∆∞·ªõc v√† n·ª• c∆∞·ªùi ƒë·∫ßu ng√†y n√†o! ‚òÄÔ∏è",
      "C∆° th·ªÉ b·∫°n ƒë√£ ‚Äòonline‚Äô ch∆∞a? M·ªôt ng·ª•m n∆∞·ªõc ƒë·ªÉ kh·ªüi ƒë·ªông nh√©! üõ´",
    ];
    const noon = [
      "ƒê·ª´ng ƒë·ªÉ n·∫Øng tr∆∞a l√†m b·∫°n h√©o ‚Äì u·ªëng n∆∞·ªõc ƒë·ªÉ gi·ªØ s·ª©c s·ªëng nha! üåûüíß",
      "B·ªØa tr∆∞a ngon h∆°n khi b·∫°n c√≥ ƒë·ªß n∆∞·ªõc trong ng∆∞·ªùi! üç±üí¶",
      "Ch√∫t n∆∞·ªõc ‚Äì m·ªôt s·ª± h·ªìi sinh nh·∫π gi·ªØa ng√†y d√†i! üåä",
      "B·∫°n gi·ªëng nh∆∞ pin ƒëi·ªán tho·∫°i ‚Äì c·∫ßn ‚Äòs·∫°c n∆∞·ªõc‚Äô m·ªói tr∆∞a! üîã",
      "Kh√¥ m√¥i ch∆∞a? U·ªëng n∆∞·ªõc l√† c√°ch y√™u b·∫£n th√¢n gi·ªØa ng√†y! üíô",
    ];
    const afternoon = [
      "ƒê·ª´ng ƒë·ªÉ c∆° th·ªÉ ‚Äòƒëu·ªëi pin‚Äô ‚Äì m·ªôt ng·ª•m n∆∞·ªõc gi√∫p b·∫°n l·∫•y l·∫°i phong ƒë·ªô! ‚ö°",
      "N√£o b·ªô c·∫ßn n∆∞·ªõc ƒë·ªÉ ti·∫øp t·ª•c s√°ng t·∫°o ƒë·∫•y! U·ªëng ch√∫t nh√©! üß†üíß",
      "M·ªôt ly n∆∞·ªõc = m·ªôt l·∫ßn refresh cho b·∫°n! üîÑ",
      "T·∫∑ng c∆° th·ªÉ b·∫°n m·ªôt ‚Äòƒëi·ªÉm t√¢m chi·ªÅu‚Äô ‚Äì l√† n∆∞·ªõc m√°t l√†nh! ü´ñ",
      "Chi·ªÅu nay, b·∫°n u·ªëng n∆∞·ªõc ch∆∞a? H√£y l√†m ƒëi·ªÅu ƒë√≥ cho ch√≠nh m√¨nh! ü§ó",
    ];
    const evening = [
      "C·∫£ ng√†y ƒë√£ m·ªát r·ªìi, m·ªôt ly n∆∞·ªõc l√† m√≥n qu√† cho c∆° th·ªÉ b·∫°n ƒë√≥! üéÅ",
      "T·ªëi v·ªÅ, m·ªçi th·ª© d·ªãu l·∫°i ‚Äì ƒë·ª´ng qu√™n d·ªãu d√†ng v·ªõi b·∫£n th√¢n b·∫±ng n∆∞·ªõc nh√©! üåô",
      "M·ªôt ch√∫t n∆∞·ªõc, m·ªôt ch√∫t th∆∞ gi√£n ‚Äì b·∫°n x·ª©ng ƒë√°ng m√†! üõãÔ∏è",
      "U·ªëng n∆∞·ªõc l√∫c n√†y nh∆∞ ƒëang v·ªó v·ªÅ t√¢m h·ªìn v·∫≠y‚Ä¶ üçµ",
      "B·∫°n ƒë√£ chƒÉm s√≥c b·∫£n th√¢n t·ªët ch∆∞a? ƒê·ª´ng qu√™n u·ªëng n∆∞·ªõc! üíô",
    ];
    const night = [
      "M·ªôt ng·ª•m n∆∞·ªõc nh·∫π ƒë·ªÉ kh√©p l·∫°i ng√†y d√†i ‚Äì ng·ªß ngon nh√©! üí§",
      "Gi·∫•c m∆° ƒë·∫πp b·∫Øt ƒë·∫ßu t·ª´ m·ªôt c∆° th·ªÉ ƒë·ªß n∆∞·ªõc! üåå",
      "N∆∞·ªõc l√† l·ªùi ch√∫c ng·ªß ngon ng·ªçt ng√†o nh·∫•t d√†nh cho b·∫°n! üò¥üíß",
      "T·∫Øt ƒë√®n, t·∫Øt lo √¢u, u·ªëng n∆∞·ªõc v√† say gi·∫•c n√†o‚Ä¶ üåô‚ú®",
      "ƒê·ª´ng ƒë·ªÉ c∆° th·ªÉ kh√°t khi t√¢m tr√≠ ƒëang ngh·ªâ ng∆°i ‚Äì u·ªëng n∆∞·ªõc tr∆∞·ªõc khi ng·ªß nh√©! üåú",
    ];

    if (hour >= 6 && hour < 11)
      return morning[Random().nextInt(morning.length)];
    if (hour >= 11 && hour < 15) return noon[Random().nextInt(noon.length)];
    if (hour >= 15 && hour < 18)
      return afternoon[Random().nextInt(afternoon.length)];
    if (hour >= 18 && hour < 22)
      return evening[Random().nextInt(evening.length)];
    return night[Random().nextInt(night.length)];
  }
}
